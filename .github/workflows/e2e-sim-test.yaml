name: E2E Simulation Test

on:
  workflow_dispatch:
    inputs:
      pr_or_branch:
        description: "Pull‚Äërequest number **or** branch name to test (default: main)"
        required: false
        default: "main"
      gateway_type:
        description: "Gateway type to use"
        required: false
        default: "kgateway"
        type: choice
        options:
          - kgateway
          - istio

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  e2e-sim-test:
    name: End-to-End Simulation Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      NAMESPACE: llm-d-sim
      GATEWAY_TYPE: ${{ inputs.gateway_type || 'kgateway' }}
      HF_TOKEN: dummy_token_for_sim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine if pr_or_branch is a PR number
        id: check_pr
        env:
          PR_OR_BRANCH: ${{ github.event.inputs.pr_or_branch }}
        shell: bash
        run: |
          echo "PR_OR_BRANCH=${PR_OR_BRANCH:-main}" >> "$GITHUB_ENV"
          if [[ "$PR_OR_BRANCH" =~ ^[0-9]+$ ]]; then
            echo "is_pr=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_pr=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Fetch and checkout PR
        if: steps.check_pr.outputs.is_pr == 'true'
        shell: bash
        run: |
          git fetch origin pull/"$PR_OR_BRANCH"/merge:pr-"$PR_OR_BRANCH"
          git checkout pr-"$PR_OR_BRANCH"

      - name: Checkout branch
        if: steps.check_pr.outputs.is_pr == 'false'
        shell: bash
        run: |
          git fetch --all --tags
          git checkout "$PR_OR_BRANCH"

      - name: Create kind config
        run: |
          mkdir -p helpers/kind-testing
          cat <<EOF > helpers/kind-testing/kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
          EOF

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          config: helpers/kind-testing/kind-config.yaml
          cluster_name: llm-d-test
          wait: 120s

      - name: Install dependencies
        run: |
          cd quickstart
          chmod +x install-deps.sh
          ./install-deps.sh

      - name: Install chart dependencies (CRDs and Gateway provider)
        run: |
          chmod +x chart-dependencies/ci-deps.sh
          ./chart-dependencies/ci-deps.sh apply ${{ env.GATEWAY_TYPE }}

      - name: Create namespace
        run: |
          kubectl create namespace "${{ env.NAMESPACE }}" || echo "Namespace already exists"

      - name: Deploy llm-d infra
        run: |
          cd quickstart
          ./llmd-infra-installer.sh \
            --namespace "${{ env.NAMESPACE }}" \
            --gateway "${{ env.GATEWAY_TYPE }}" \
            --release infra-sim

      - name: Wait for infrastructure pods to be ready
        run: |
          echo "Waiting for infrastructure pods to be ready‚Ä¶"
          kubectl wait --for=condition=ready pod \
            --selector=app.kubernetes.io/managed-by=Helm \
            --namespace "${{ env.NAMESPACE }}" \
            --timeout=300s || true

      - name: Deploy simulation services with helmfile
        run: |
          cd quickstart/examples/sim
          helmfile --selector managedBy=helmfile apply

      - name: Wait for all simulation pods to be ready
        run: |
          echo "‚è≥ Waiting for all pods in namespace '${{ env.NAMESPACE }}' to become ready..."
          kubectl wait pod \
            --for=condition=Ready \
            --all \
            -n "${{ env.NAMESPACE }}" \
            --timeout=1m

          echo "‚úÖ All pods are ready."
          kubectl get pods -n "${{ env.NAMESPACE }}"

      - name: Apply Istio DestinationRule for EPP
        if: ${{ env.GATEWAY_TYPE == 'istio' }}
        run: |
          echo "üîé Applying Istio DestinationRule for EPP service..."
          EPP_NAME=$(kubectl get svc -n "${{ env.NAMESPACE }}" -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}' | grep -- "-epp" | head -n1)
          if [[ -z "$EPP_NAME" ]]; then
            echo "‚ùå Could not find EPP service"
            exit 1
          fi
          echo "‚úÖ Found EPP service: $EPP_NAME"

          cat <<EOF | kubectl apply -n "${{ env.NAMESPACE }}" -f -
          apiVersion: networking.istio.io/v1
          kind: DestinationRule
          metadata:
            name: ${EPP_NAME}-insecure-tls
          spec:
            host: ${EPP_NAME}
            trafficPolicy:
              tls:
                mode: SIMPLE
                insecureSkipVerify: true
          EOF

      - name: Show deployment status
        run: |
          echo "=== Pods ==="
          kubectl get pods -n "${NAMESPACE}"
          echo ""
          echo "=== Services ==="
          kubectl get svc -n "${NAMESPACE}"
          echo ""
          echo "=== Helm releases ==="
          helm list --all-namespaces

      - name: Locate inference‚Äëgateway Service
        id: gateway
        run: |
          echo "üîç Searching for inference gateway service‚Ä¶"
          GATEWAY_SERVICE=$(kubectl get svc -n "${NAMESPACE}" -o jsonpath='{.items[*].metadata.name}' \
                            | tr ' ' '\n' | grep 'inference-gateway' | head -n1)
          if [[ -z "$GATEWAY_SERVICE" ]]; then
            echo "‚ùå Could not find inference gateway service"
            exit 1
          fi
          echo "‚úÖ Found gateway service: $GATEWAY_SERVICE"
          echo "service_name=$GATEWAY_SERVICE" >> "$GITHUB_OUTPUT"

      - name: Port-forward gateway service
        env:
          SERVICE_NAME: ${{ steps.gateway.outputs.service_name }}
        run: |
          set -euo pipefail

          echo "üåê Service definition:"
          kubectl get svc "$SERVICE_NAME" -n "${NAMESPACE}" -o yaml

          echo "üì° Starting port-forward on service/$SERVICE_NAME (8000 ‚ûú 80)"
          kubectl port-forward "service/${SERVICE_NAME}" 8000:80 -n "${NAMESPACE}" >/tmp/pf.log 2>&1 &
          PORT_FORWARD_PID=$!
          echo "PORT_FORWARD_PID=$PORT_FORWARD_PID" >> "$GITHUB_ENV"

          # Wait for the tunnel to be ready (fail fast if it exits)
          echo "Waiting for port-forward tunnel..."
          for i in {1..10}; do
            if ! kill -0 "$PORT_FORWARD_PID" 2>/dev/null; then
              echo "‚ùå port-forward process died; log:"
              cat /tmp/pf.log
              exit 1
            fi
            if grep -q "Forwarding from" /tmp/pf.log; then
              echo "Tunnel is ready."
              break
            fi
            sleep 1
          done

          echo "üß™ Sanity check: /v1/models"
          # Use --fail to exit with an error on non-200 responses.
          # The output will be printed directly to the log.
          curl --silent --fail --show-error http://localhost:8000/v1/models

          echo "‚úÖ Port‚Äëforward working"

      - name: Test /v1/models endpoint
        run: |
          echo "üß™ Testing /v1/models‚Ä¶"
          response=$(curl --silent --fail http://localhost:8000/v1/models)
          echo "Response: $response"
          echo "$response" | jq -e '.data' > /dev/null
          echo "‚úÖ /v1/models passed"

      - name: Test /v1/chat/completions endpoint
        run: |
          echo "üß™ Testing /v1/chat/completions‚Ä¶"
          response=$(curl --silent --fail -X POST http://localhost:8000/v1/chat/completions \
                   -H "Content-Type: application/json" \
                   -H "x-model-name: random" \
                   -d '{ "model":"random","messages":[{ "role":"user","content":"How are you?" }] }')
          echo "Response: $response"
          echo "$response" | jq -e '.choices[0].message.content' > /dev/null
          echo "‚úÖ /v1/chat/completions passed"

      - name: Test /v1/completions endpoint
        run: |
          echo "üß™ Testing /v1/completions‚Ä¶"
          response=$(curl --silent --fail -X POST http://localhost:8000/v1/completions \
                   -H "Content-Type: application/json" \
                   -d '{ "model":"random","prompt":"Cats or Dogs?" }')
          echo "Response: $response"
          echo "$response" | jq -e '.choices[0].text' > /dev/null
          echo "‚úÖ /v1/completions passed"

      - name: Validate Uninstall
        if: always()
        run: |
          echo "üßπ Validating Cleanup‚Ä¶"
          cd quickstart/examples/sim
          helmfile --selector managedBy=helmfile destroy
          helm uninstall infra-sim -n "${NAMESPACE}"
