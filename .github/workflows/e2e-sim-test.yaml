name: E2E Simulation Test

on:
  workflow_dispatch:
    inputs:
      gateway_type:
        description: 'Gateway type to use'
        required: false
        default: 'kgateway'
        type: choice
        options:
        - kgateway
        - istio
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'llm-d'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  e2e-sim-test:
    name: End-to-End Simulation Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NAMESPACE: ${{ inputs.namespace || 'llm-d' }}
      GATEWAY_TYPE: ${{ inputs.gateway_type || 'kgateway' }}
      HF_TOKEN: dummy_token_for_sim
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create kind config
        run: |
          mkdir -p helpers/kind-testing
          cat <<EOF > helpers/kind-testing/kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: InitConfiguration
              nodeRegistration:
                kubeletExtraArgs:
                  node-labels: "ingress-ready=true"
            extraPortMappings:
            - containerPort: 80
              hostPort: 80
              protocol: TCP
            - containerPort: 443
              hostPort: 443
              protocol: TCP
            - containerPort: 31233
              hostPort: 31233
              protocol: TCP
          EOF

      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          config: helpers/kind-testing/kind-config.yaml
          cluster_name: llm-d-test
          wait: 120s

      - name: Install dependencies
        run: |
          cd quickstart
          chmod +x install-deps.sh
          ./install-deps.sh

      - name: Install chart dependencies (CRDs and Gateway provider)
        run: |
          chmod +x chart-dependencies/ci-deps.sh
          ./chart-dependencies/ci-deps.sh apply ${{ env.GATEWAY_TYPE }}

      - name: Create namespace
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} || echo "Namespace already exists"

      - name: Deploy LLM-D infrastructure
        run: |
          cd quickstart
          chmod +x llmd-infra-installer.sh
          ./llmd-infra-installer.sh \
            --namespace ${{ env.NAMESPACE }} \
            --gateway ${{ env.GATEWAY_TYPE }} \
            --release sim

      - name: Wait for infrastructure to be ready
        run: |
          echo "Waiting for infrastructure pods to be ready..."
          kubectl wait --for=condition=ready pod \
            --selector=app.kubernetes.io/managed-by=Helm \
            --namespace ${{ env.NAMESPACE }} \
            --timeout=300s || true

      - name: Deploy simulation services with helmfile
        run: |
          cd quickstart/examples/sim
          helmfile --selector managedBy=helmfile apply

      - name: Wait for simulation pods to be ready
        run: |
          echo "Waiting for simulation pods to be ready..."
          kubectl wait --for=condition=ready pod \
            --selector=app.kubernetes.io/managed-by=Helm \
            --namespace ${{ env.NAMESPACE }} \
            --timeout=300s || true

      - name: Show deployment status
        run: |
          echo "=== Namespace ${{ env.NAMESPACE }} pods ==="
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Services ==="
          kubectl get services -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Helm releases ==="
          helm list --all-namespaces

      - name: Find gateway service
        id: gateway
        run: |
          # Look for the inference gateway service
          GATEWAY_SERVICE=$(kubectl get services -n ${{ env.NAMESPACE }} -o jsonpath='{.items[?(@.metadata.name contains "inference-gateway")].metadata.name}' | head -1)
          if [ -z "$GATEWAY_SERVICE" ]; then
            echo "Could not find inference gateway service"
            kubectl get services -n ${{ env.NAMESPACE }}
            exit 1
          fi
          echo "Found gateway service: $GATEWAY_SERVICE"
          echo "service_name=$GATEWAY_SERVICE" >> $GITHUB_OUTPUT

      - name: Port forward gateway service
        run: |
          kubectl port-forward service/${{ steps.gateway.outputs.service_name }} 8000:80 -n ${{ env.NAMESPACE }} &
          PORT_FORWARD_PID=$!
          echo "PORT_FORWARD_PID=$PORT_FORWARD_PID" >> $GITHUB_ENV

          # Wait a bit for port forward to establish
          sleep 10

          # Test if port forward is working
          curl -f http://localhost:8000/healthz || echo "Health check endpoint not available"

      - name: Test /v1/models endpoint
        run: |
          echo "Testing /v1/models endpoint..."
          response=$(curl -s http://localhost:8000/v1/models \
            -H "Content-Type: application/json" || echo "Request failed")
          echo "Response: $response"
          
          # Basic validation - check if response contains expected structure
          if echo "$response" | jq -e '.data' > /dev/null 2>&1; then
            echo "✅ /v1/models endpoint test passed"
          else
            echo "❌ /v1/models endpoint test failed - invalid response structure"
            exit 1
          fi

      - name: Test /v1/chat/completions endpoint
        run: |
          echo "Testing /v1/chat/completions endpoint..."
          response=$(curl -s http://localhost:8000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "x-model-name: random" \
            -d '{
              "model": "random",
              "messages": [
                { "role": "user", "content": "How are you today?" }
              ],
              "max_tokens": 50
            }' || echo "Request failed")
          echo "Response: $response"
          
          # Basic validation - check if response contains expected structure
          if echo "$response" | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
            echo "✅ /v1/chat/completions endpoint test passed"
          else
            echo "❌ /v1/chat/completions endpoint test failed - invalid response structure"
            exit 1
          fi

      - name: Cleanup port forward
        if: always()
        run: |
          if [ ! -z "$PORT_FORWARD_PID" ]; then
            kill $PORT_FORWARD_PID || true
          fi

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Pod logs for debugging ==="
          kubectl get pods -n ${{ env.NAMESPACE }}
          echo ""
          for pod in $(kubectl get pods -n ${{ env.NAMESPACE }} -o jsonpath='{.items[*].metadata.name}'); do
            echo "=== Logs for $pod ==="
            kubectl logs $pod -n ${{ env.NAMESPACE }} --tail=50 || echo "Could not get logs for $pod"
            echo ""
          done

      - name: Cleanup deployment
        if: always()
        run: |
          echo "Cleaning up deployment..."
          cd quickstart/examples/sim
          helmfile --selector managedBy=helmfile destroy || echo "Helmfile cleanup failed"
          helm uninstall sim -n ${{ env.NAMESPACE }} || echo "Helm cleanup failed"
          kubectl delete namespace ${{ env.NAMESPACE }} || echo "Namespace cleanup failed"
